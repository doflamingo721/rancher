/*
Copyright 2023 Rancher Labs, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by main. DO NOT EDIT.

package v3

import (
	"context"
	"time"

	v3 "github.com/rancher/rancher/pkg/apis/project.cattle.io/v3"
	"github.com/rancher/wrangler/pkg/apply"
	"github.com/rancher/wrangler/pkg/condition"
	"github.com/rancher/wrangler/pkg/generic"
	"github.com/rancher/wrangler/pkg/kv"
	"k8s.io/apimachinery/pkg/api/equality"
	"k8s.io/apimachinery/pkg/api/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	"k8s.io/apimachinery/pkg/types"
	"k8s.io/apimachinery/pkg/watch"
)

// AppController interface for managing App resources.
type AppController interface {
	generic.ControllerMeta
	AppClient

	// OnChange runs the given handler when the controller detects a resource was changed.
	OnChange(ctx context.Context, name string, sync AppHandler)

	// OnRemove runs the given handler when the controller detects a resource was changed.
	OnRemove(ctx context.Context, name string, sync AppHandler)

	// Enqueue adds the resource with the given name to the worker queue of the controller.
	Enqueue(namespace, name string)

	// EnqueueAfter runs Enqueue after the provided duration.
	EnqueueAfter(namespace, name string, duration time.Duration)

	// Cache returns a cache for the resource type T.
	Cache() AppCache
}

// AppClient interface for managing App resources in Kubernetes.
type AppClient interface {
	// Create creates a new object and return the newly created Object or an error.
	Create(*v3.App) (*v3.App, error)

	// Update updates the object and return the newly updated Object or an error.
	Update(*v3.App) (*v3.App, error)
	// UpdateStatus updates the Status field of a the object and return the newly updated Object or an error.
	// Will always return an error if the object does not have a status field.
	UpdateStatus(*v3.App) (*v3.App, error)

	// Delete deletes the Object in the given name.
	Delete(namespace, name string, options *metav1.DeleteOptions) error

	// Get will attempt to retrieve the resource with the specified name.
	Get(namespace, name string, options metav1.GetOptions) (*v3.App, error)

	// List will attempt to find multiple resources.
	List(namespace string, opts metav1.ListOptions) (*v3.AppList, error)

	// Watch will start watching resources.
	Watch(namespace string, opts metav1.ListOptions) (watch.Interface, error)

	// Patch will patch the resource with the matching name.
	Patch(namespace, name string, pt types.PatchType, data []byte, subresources ...string) (result *v3.App, err error)
}

// AppCache interface for retrieving App resources in memory.
type AppCache interface {
	// Get returns the resources with the specified name from the cache.
	Get(namespace, name string) (*v3.App, error)

	// List will attempt to find resources from the Cache.
	List(namespace string, selector labels.Selector) ([]*v3.App, error)

	// AddIndexer adds  a new Indexer to the cache with the provided name.
	// If you call this after you already have data in the store, the results are undefined.
	AddIndexer(indexName string, indexer AppIndexer)

	// GetByIndex returns the stored objects whose set of indexed values
	// for the named index includes the given indexed value.
	GetByIndex(indexName, key string) ([]*v3.App, error)
}

// AppHandler is function for performing any potential modifications to a App resource.
type AppHandler func(string, *v3.App) (*v3.App, error)

// AppIndexer computes a set of indexed values for the provided object.
type AppIndexer func(obj *v3.App) ([]string, error)

// AppGenericController wraps wrangler/pkg/generic.Controller so that the function definitions adhere to AppController interface.
type AppGenericController struct {
	generic.ControllerInterface[*v3.App, *v3.AppList]
}

// OnChange runs the given resource handler when the controller detects a resource was changed.
func (c *AppGenericController) OnChange(ctx context.Context, name string, sync AppHandler) {
	c.ControllerInterface.OnChange(ctx, name, generic.ObjectHandler[*v3.App](sync))
}

// OnRemove runs the given object handler when the controller detects a resource was changed.
func (c *AppGenericController) OnRemove(ctx context.Context, name string, sync AppHandler) {
	c.ControllerInterface.OnRemove(ctx, name, generic.ObjectHandler[*v3.App](sync))
}

// Cache returns a cache of resources in memory.
func (c *AppGenericController) Cache() AppCache {
	return &AppGenericCache{
		c.ControllerInterface.Cache(),
	}
}

// AppGenericCache wraps wrangler/pkg/generic.Cache so the function definitions adhere to AppCache interface.
type AppGenericCache struct {
	generic.CacheInterface[*v3.App]
}

// AddIndexer adds  a new Indexer to the cache with the provided name.
// If you call this after you already have data in the store, the results are undefined.
func (c AppGenericCache) AddIndexer(indexName string, indexer AppIndexer) {
	c.CacheInterface.AddIndexer(indexName, generic.Indexer[*v3.App](indexer))
}

type AppStatusHandler func(obj *v3.App, status v3.AppStatus) (v3.AppStatus, error)

type AppGeneratingHandler func(obj *v3.App, status v3.AppStatus) ([]runtime.Object, v3.AppStatus, error)

func FromAppHandlerToHandler(sync AppHandler) generic.Handler {
	return generic.FromObjectHandlerToHandler(generic.ObjectHandler[*v3.App](sync))
}

func RegisterAppStatusHandler(ctx context.Context, controller AppController, condition condition.Cond, name string, handler AppStatusHandler) {
	statusHandler := &appStatusHandler{
		client:    controller,
		condition: condition,
		handler:   handler,
	}
	controller.AddGenericHandler(ctx, name, FromAppHandlerToHandler(statusHandler.sync))
}

func RegisterAppGeneratingHandler(ctx context.Context, controller AppController, apply apply.Apply,
	condition condition.Cond, name string, handler AppGeneratingHandler, opts *generic.GeneratingHandlerOptions) {
	statusHandler := &appGeneratingHandler{
		AppGeneratingHandler: handler,
		apply:                apply,
		name:                 name,
		gvk:                  controller.GroupVersionKind(),
	}
	if opts != nil {
		statusHandler.opts = *opts
	}
	controller.OnChange(ctx, name, statusHandler.Remove)
	RegisterAppStatusHandler(ctx, controller, condition, name, statusHandler.Handle)
}

type appStatusHandler struct {
	client    AppClient
	condition condition.Cond
	handler   AppStatusHandler
}

func (a *appStatusHandler) sync(key string, obj *v3.App) (*v3.App, error) {
	if obj == nil {
		return obj, nil
	}

	origStatus := obj.Status.DeepCopy()
	obj = obj.DeepCopy()
	newStatus, err := a.handler(obj, obj.Status)
	if err != nil {
		// Revert to old status on error
		newStatus = *origStatus.DeepCopy()
	}

	if a.condition != "" {
		if errors.IsConflict(err) {
			a.condition.SetError(&newStatus, "", nil)
		} else {
			a.condition.SetError(&newStatus, "", err)
		}
	}
	if !equality.Semantic.DeepEqual(origStatus, &newStatus) {
		if a.condition != "" {
			// Since status has changed, update the lastUpdatedTime
			a.condition.LastUpdated(&newStatus, time.Now().UTC().Format(time.RFC3339))
		}

		var newErr error
		obj.Status = newStatus
		newObj, newErr := a.client.UpdateStatus(obj)
		if err == nil {
			err = newErr
		}
		if newErr == nil {
			obj = newObj
		}
	}
	return obj, err
}

type appGeneratingHandler struct {
	AppGeneratingHandler
	apply apply.Apply
	opts  generic.GeneratingHandlerOptions
	gvk   schema.GroupVersionKind
	name  string
}

func (a *appGeneratingHandler) Remove(key string, obj *v3.App) (*v3.App, error) {
	if obj != nil {
		return obj, nil
	}

	obj = &v3.App{}
	obj.Namespace, obj.Name = kv.RSplit(key, "/")
	obj.SetGroupVersionKind(a.gvk)

	return nil, generic.ConfigureApplyForObject(a.apply, obj, &a.opts).
		WithOwner(obj).
		WithSetID(a.name).
		ApplyObjects()
}

func (a *appGeneratingHandler) Handle(obj *v3.App, status v3.AppStatus) (v3.AppStatus, error) {
	if !obj.DeletionTimestamp.IsZero() {
		return status, nil
	}

	objs, newStatus, err := a.AppGeneratingHandler(obj, status)
	if err != nil {
		return newStatus, err
	}

	return newStatus, generic.ConfigureApplyForObject(a.apply, obj, &a.opts).
		WithOwner(obj).
		WithSetID(a.name).
		ApplyObjects(objs...)
}
