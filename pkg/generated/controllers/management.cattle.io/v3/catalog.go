/*
Copyright 2023 Rancher Labs, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by main. DO NOT EDIT.

package v3

import (
	"context"
	"time"

	v3 "github.com/rancher/rancher/pkg/apis/management.cattle.io/v3"
	"github.com/rancher/wrangler/pkg/apply"
	"github.com/rancher/wrangler/pkg/condition"
	"github.com/rancher/wrangler/pkg/generic"
	"github.com/rancher/wrangler/pkg/kv"
	"k8s.io/apimachinery/pkg/api/equality"
	"k8s.io/apimachinery/pkg/api/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	"k8s.io/apimachinery/pkg/types"
	"k8s.io/apimachinery/pkg/watch"
)

// CatalogController interface for managing Catalog resources.
type CatalogController interface {
	generic.ControllerMeta
	CatalogClient

	// OnChange runs the given handler when the controller detects a resource was changed.
	OnChange(ctx context.Context, name string, sync CatalogHandler)

	// OnRemove runs the given handler when the controller detects a resource was changed.
	OnRemove(ctx context.Context, name string, sync CatalogHandler)

	// Enqueue adds the resource with the given name to the worker queue of the controller.
	Enqueue(name string)

	// EnqueueAfter runs Enqueue after the provided duration.
	EnqueueAfter(name string, duration time.Duration)

	// Cache returns a cache for the resource type T.
	Cache() CatalogCache
}

// CatalogClient interface for managing Catalog resources in Kubernetes.
type CatalogClient interface {
	// Create creates a new object and return the newly created Object or an error.
	Create(*v3.Catalog) (*v3.Catalog, error)

	// Update updates the object and return the newly updated Object or an error.
	Update(*v3.Catalog) (*v3.Catalog, error)
	// UpdateStatus updates the Status field of a the object and return the newly updated Object or an error.
	// Will always return an error if the object does not have a status field.
	UpdateStatus(*v3.Catalog) (*v3.Catalog, error)

	// Delete deletes the Object in the given name.
	Delete(name string, options *metav1.DeleteOptions) error

	// Get will attempt to retrieve the resource with the specified name.
	Get(name string, options metav1.GetOptions) (*v3.Catalog, error)

	// List will attempt to find multiple resources.
	List(opts metav1.ListOptions) (*v3.CatalogList, error)

	// Watch will start watching resources.
	Watch(opts metav1.ListOptions) (watch.Interface, error)

	// Patch will patch the resource with the matching name.
	Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v3.Catalog, err error)
}

// CatalogCache interface for retrieving Catalog resources in memory.
type CatalogCache interface {
	// Get returns the resources with the specified name from the cache.
	Get(name string) (*v3.Catalog, error)

	// List will attempt to find resources from the Cache.
	List(selector labels.Selector) ([]*v3.Catalog, error)

	// AddIndexer adds  a new Indexer to the cache with the provided name.
	// If you call this after you already have data in the store, the results are undefined.
	AddIndexer(indexName string, indexer CatalogIndexer)

	// GetByIndex returns the stored objects whose set of indexed values
	// for the named index includes the given indexed value.
	GetByIndex(indexName, key string) ([]*v3.Catalog, error)
}

// CatalogHandler is function for performing any potential modifications to a Catalog resource.
type CatalogHandler func(string, *v3.Catalog) (*v3.Catalog, error)

// CatalogIndexer computes a set of indexed values for the provided object.
type CatalogIndexer func(obj *v3.Catalog) ([]string, error)

// CatalogGenericController wraps wrangler/pkg/generic.NonNamespacedController so that the function definitions adhere to CatalogController interface.
type CatalogGenericController struct {
	generic.NonNamespacedControllerInterface[*v3.Catalog, *v3.CatalogList]
}

// OnChange runs the given resource handler when the controller detects a resource was changed.
func (c *CatalogGenericController) OnChange(ctx context.Context, name string, sync CatalogHandler) {
	c.NonNamespacedControllerInterface.OnChange(ctx, name, generic.ObjectHandler[*v3.Catalog](sync))
}

// OnRemove runs the given object handler when the controller detects a resource was changed.
func (c *CatalogGenericController) OnRemove(ctx context.Context, name string, sync CatalogHandler) {
	c.NonNamespacedControllerInterface.OnRemove(ctx, name, generic.ObjectHandler[*v3.Catalog](sync))
}

// Cache returns a cache of resources in memory.
func (c *CatalogGenericController) Cache() CatalogCache {
	return &CatalogGenericCache{
		c.NonNamespacedControllerInterface.Cache(),
	}
}

// CatalogGenericCache wraps wrangler/pkg/generic.NonNamespacedCache so the function definitions adhere to CatalogCache interface.
type CatalogGenericCache struct {
	generic.NonNamespacedCacheInterface[*v3.Catalog]
}

// AddIndexer adds  a new Indexer to the cache with the provided name.
// If you call this after you already have data in the store, the results are undefined.
func (c CatalogGenericCache) AddIndexer(indexName string, indexer CatalogIndexer) {
	c.NonNamespacedCacheInterface.AddIndexer(indexName, generic.Indexer[*v3.Catalog](indexer))
}

type CatalogStatusHandler func(obj *v3.Catalog, status v3.CatalogStatus) (v3.CatalogStatus, error)

type CatalogGeneratingHandler func(obj *v3.Catalog, status v3.CatalogStatus) ([]runtime.Object, v3.CatalogStatus, error)

func FromCatalogHandlerToHandler(sync CatalogHandler) generic.Handler {
	return generic.FromObjectHandlerToHandler(generic.ObjectHandler[*v3.Catalog](sync))
}

func RegisterCatalogStatusHandler(ctx context.Context, controller CatalogController, condition condition.Cond, name string, handler CatalogStatusHandler) {
	statusHandler := &catalogStatusHandler{
		client:    controller,
		condition: condition,
		handler:   handler,
	}
	controller.AddGenericHandler(ctx, name, FromCatalogHandlerToHandler(statusHandler.sync))
}

func RegisterCatalogGeneratingHandler(ctx context.Context, controller CatalogController, apply apply.Apply,
	condition condition.Cond, name string, handler CatalogGeneratingHandler, opts *generic.GeneratingHandlerOptions) {
	statusHandler := &catalogGeneratingHandler{
		CatalogGeneratingHandler: handler,
		apply:                    apply,
		name:                     name,
		gvk:                      controller.GroupVersionKind(),
	}
	if opts != nil {
		statusHandler.opts = *opts
	}
	controller.OnChange(ctx, name, statusHandler.Remove)
	RegisterCatalogStatusHandler(ctx, controller, condition, name, statusHandler.Handle)
}

type catalogStatusHandler struct {
	client    CatalogClient
	condition condition.Cond
	handler   CatalogStatusHandler
}

func (a *catalogStatusHandler) sync(key string, obj *v3.Catalog) (*v3.Catalog, error) {
	if obj == nil {
		return obj, nil
	}

	origStatus := obj.Status.DeepCopy()
	obj = obj.DeepCopy()
	newStatus, err := a.handler(obj, obj.Status)
	if err != nil {
		// Revert to old status on error
		newStatus = *origStatus.DeepCopy()
	}

	if a.condition != "" {
		if errors.IsConflict(err) {
			a.condition.SetError(&newStatus, "", nil)
		} else {
			a.condition.SetError(&newStatus, "", err)
		}
	}
	if !equality.Semantic.DeepEqual(origStatus, &newStatus) {
		if a.condition != "" {
			// Since status has changed, update the lastUpdatedTime
			a.condition.LastUpdated(&newStatus, time.Now().UTC().Format(time.RFC3339))
		}

		var newErr error
		obj.Status = newStatus
		newObj, newErr := a.client.UpdateStatus(obj)
		if err == nil {
			err = newErr
		}
		if newErr == nil {
			obj = newObj
		}
	}
	return obj, err
}

type catalogGeneratingHandler struct {
	CatalogGeneratingHandler
	apply apply.Apply
	opts  generic.GeneratingHandlerOptions
	gvk   schema.GroupVersionKind
	name  string
}

func (a *catalogGeneratingHandler) Remove(key string, obj *v3.Catalog) (*v3.Catalog, error) {
	if obj != nil {
		return obj, nil
	}

	obj = &v3.Catalog{}
	obj.Namespace, obj.Name = kv.RSplit(key, "/")
	obj.SetGroupVersionKind(a.gvk)

	return nil, generic.ConfigureApplyForObject(a.apply, obj, &a.opts).
		WithOwner(obj).
		WithSetID(a.name).
		ApplyObjects()
}

func (a *catalogGeneratingHandler) Handle(obj *v3.Catalog, status v3.CatalogStatus) (v3.CatalogStatus, error) {
	if !obj.DeletionTimestamp.IsZero() {
		return status, nil
	}

	objs, newStatus, err := a.CatalogGeneratingHandler(obj, status)
	if err != nil {
		return newStatus, err
	}

	return newStatus, generic.ConfigureApplyForObject(a.apply, obj, &a.opts).
		WithOwner(obj).
		WithSetID(a.name).
		ApplyObjects(objs...)
}
